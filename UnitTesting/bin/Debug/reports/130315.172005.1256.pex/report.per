<?xml version="1.0" encoding="utf-8"?>
<pex id="{dde5ab43-6d34-4219-885b-5f730ce5d050}" creationTime="2013-03-15 11:50:05Z" configuration="UnitTesting.UnitTest!\UnitTestExample!\*" created="2013-03-15 11:50:05Z" pexVersion="0.94.51023.0" xml="D:\UnitTesting\UnitTesting\bin\Debug\reports\130315.172005.1256.pex\report.per" html="D:\UnitTesting\UnitTesting\bin\Debug\reports\130315.172005.1256.pex\report.html"><environment commandLine="&quot;D:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll /membernamefilter:M:GetFileContent! /methodnamefilter:GetFileContent! /namespacefilter:UnitTesting.UnitTest! /typefilter:UnitTestExampleTest! /x64failsilently /clrversion:v4.0.30319 /referencedprojectassemblies:UnitTesting /donotopenreport /reportlevel:Xml /reportrootpath:D:\UnitTesting\UnitTesting.Tests\bin\Debug\reports /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:D:\UnitTesting\UnitTesting.Tests\UnitTesting.Tests.csproj /testprojectnotupdate /testprojectskip" machineName="SOUVIKDXP001F" osVersion="Microsoft Windows NT 5.1.2600 Service Pack 3" processorCount="2" clrVersion="4.0.30319.269" bitness="x86" user="souvikd"><envVars><envVar name="HOMEPATH" value="\Documents and Settings\souvikd"/>
<envVar name="COMPUTERNAME" value="SOUVIKDXP001F"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="VS80COMNTOOLS" value="D:\Program Files\Microsoft Visual Studio 8\Common7\Tools\"/>
<envVar name="PROCESSOR_IDENTIFIER" value="x86 Family 6 Model 23 Stepping 10, GenuineIntel"/>
<envVar name="QTJAVA" value="C:\Program Files\Java\jre7\lib\ext\QTJava.zip"/>
<envVar name="TMP" value="C:\DOCUME~1\souvikd\LOCALS~1\Temp"/>
<envVar name="CLASSPATH" value=".;C:\Program Files\Java\jre7\lib\ext\QTJava.zip"/>
<envVar name="PROCESSOR_REVISION" value="170a"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH"/>
<envVar name="TRACKER_ATTACHED" value="1"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_CLSID" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="VSPID" value="1404"/>
<envVar name="SSH_AGENT_PID" value="4464"/>
<envVar name="TEMP" value="C:\DOCUME~1\souvikd\LOCALS~1\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="SSH_AUTH_SOCK" value="/tmp/ssh-wVZwJo3068/agent.3068"/>
<envVar name="CLIENTNAME" value="Console"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x12"/>
<envVar name="USERDNSDOMAIN" value="AD.INDIADEV.LEXMARK.COM"/>
<envVar name="USERDOMAIN" value="INDIADEV"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="NUMBER_OF_PROCESSORS" value="2"/>
<envVar name="Path" value="C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\XEClient\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\Intel\WiFi\bin\;D:\Program Files\TortoiseSVN\bin;C:\Program Files\Java\jdk1.7.0_09\bin;C:\Program Files\QuickTime\QTSystem\;C:\Program Files\Common Files\Microsoft Shared\Windows Live"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
<envVar name="VS90COMNTOOLS" value="D:\Program Files\Microsoft Visual Studio 9.0\Common7\Tools\"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Linq.Expressions.ExpressionCompiler,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,__Box`1,__SzArrayHelper`1"/>
<envVar name="VisualStudioDir" value="C:\Documents and Settings\souvikd\My Documents\Visual Studio 2010"/>
<envVar name="CodeContractsInstallDir" value="C:\Program Files\Microsoft\Contracts\"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="FP_NO_HOST_CHECK" value="NO"/>
<envVar name="pex_clientid" value="pex1404_1"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="LOGONSERVER" value="\\NAZRUL"/>
<envVar name="SQLPATH" value="C:\XEClient\sqlplus"/>
<envVar name="USERPROFILE" value="C:\Documents and Settings\souvikd"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll,C:\WINDOWS\assembly\GAC_MSIL\Microsoft.Pex.Linq\0.94.0.0__31bf3856ad364e35\Microsoft.Pex.Linq.dll"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value=""/>
<envVar name="APPDATA" value="C:\Documents and Settings\souvikd\Application Data"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="VS100COMNTOOLS" value="D:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="USERNAME" value="souvikd"/>
<envVar name="COR_PROFILER" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="pex_server_channel" value="pex1404"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,System,System.Core,System.Web,System.Xml.Linq,UnitTesting,UnitTesting.Tests"/>
<envVar name="ALLUSERSPROFILE" value="C:\Documents and Settings\All Users"/>
</envVars>
</environment>
<settings/>
<reflection><existingTest method="GetFileContent206" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000b" generated="true" hosted="true"/>
<existingTest method="GetFileContentThrowsInvalidOperationException289" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000009" generated="true" hosted="true" exceptionType="System.InvalidOperationException"/>
<existingTest method="GetFileContentThrowsInvalidOperationException872" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000a" generated="true" hosted="true" exceptionType="System.InvalidOperationException"/>
</reflection>
<assembly name="UnitTesting" version="1.0.0.0" fileVersion="1.0.0.0" fullName="UnitTesting, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="D:\UnitTesting\UnitTesting\bin\Debug\UnitTesting.dll" fileName="UnitTesting.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="UnitTestExampleTest" type="UnitTesting.UnitTest.UnitTestExampleTest" typeName="UnitTestExampleTest" token="2000002" href="fix\UnitTesting.Tests.629.html"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
<settings typeUnderTest="UnitTesting.UnitTest.UnitTestExample"/>
<exploration shortName="Capitalize(String)" fullName="UnitTesting.UnitTest.UnitTestExampleTest.Capitalize(String)"><method><definition assemblyName="UnitTesting.Tests" name="Capitalize" token="6000001"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="value" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</definition>
</method>
<memberUnderTest assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</memberUnderTest>
<log level="message" time="2013-03-15 11:50:05Z" category="progress" message="    0 runs"/>
<log level="message" time="2013-03-15 11:50:05Z" category="symbols" message="could not load symbols for D:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe"/>
<log level="message" time="2013-03-15 11:50:05Z" category="symbols" message="search path: ;"/>
<test name="Capitalize" state="success" duration="0.18"/>
<generatedTest id="65454a58-b799-4e36-9cd2-ed0ab761cef7" index="1" run="1" exceptionState="expected" status="expectedexception" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeThrowsArgumentNullException431"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="20" acov="3" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">null</value>
<code><![CDATA[string s;
s = this.Capitalize((string)null);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated;System"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void CapitalizeThrowsArgumentNullException431()
{
    string s;
    s = this.Capitalize((string)null);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<exceptionChain><exception typeDisplayName="ArgumentNullException" source="UnitTesting"><message><![CDATA[Value cannot be null.
Parameter name: value]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="ArgumentNullException" token="2000093" namespace="System"/>
</type>
<value name="paramName">value</value>
<stackTrace><frame value="  at UnitTestExample.Capitalize(String) in D:\UnitTesting\UnitTesting\UnitTestExample.vb(12)" method="UnitTestExample.Capitalize(String)" offset="21" file="D:\UnitTesting\UnitTesting\UnitTestExample.vb" line="12"><method assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
            'Adding Pre-Condition (Added to instruct PEX NullReferenceException is a expected exception if NULL value is passed to this method)
            If value Is Nothing Then]]></beforeSource>
<source><![CDATA[                Throw New ArgumentNullException("value")]]></source>
<afterSource><![CDATA[            End If

            Dim sb = New StringBuilder()]]></afterSource>
</frame>
<frame value="  at UnitTestExampleTest.Capitalize(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(23)" method="UnitTestExampleTest.Capitalize(String)" offset="2" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="23"><method assemblyName="UnitTesting.Tests" name="Capitalize" token="6000001"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="value" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        [PexMethod] //Parameterized Unit Testing using PEX
        public string Capitalize(string value)
        {]]></beforeSource>
<source><![CDATA[            string result = UnitTestExample.Capitalize(value);]]></source>
<afterSource><![CDATA[            return result;
            // TODO: add assertions to method UnitTestExampleTest.Capitalize(String)
        }]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return value == (string)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:05Z" category="coverage" message="coverage increased from 0 to 3 blocks (+3) after flipping UnitTesting.UnitTest.UnitTestExample.Capitalize at 0x0009"/>
<test name="Capitalize" state="success" duration="0.01"/>
<generatedTest id="e5989294-73cd-487b-ac58-c7cdfbcfde98" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize983"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="7" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;&quot;</value>
<value name="result">&quot;&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("");
Assert.AreEqual<string>("", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize983()
{
    string s;
    s = this.Capitalize("");
    Assert.AreEqual<string>("", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && value.Length < 1;
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:05Z" category="coverage" message="coverage increased from 3 to 7 blocks (+4) after flipping UnitTesting.UnitTest.UnitTestExample.Capitalize at 0x0009"/>
<test name="Capitalize" state="success" duration="0.01"/>
<generatedTest id="2ed29be7-2c66-4d88-ae26-bbb76bfa7a11" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize870"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="12" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;\0&quot;</value>
<value name="result">&quot;&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("\0");
Assert.AreEqual<string>("", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize870()
{
    string s;
    s = this.Capitalize("\0");
    Assert.AreEqual<string>("", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && value.Length == 1 && 
                                (96 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 123) && (64 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 91) && value[0] != ',' && value[0] != '.' && value[0] != ':';
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:05Z" category="coverage" message="coverage increased from 7 to 12 blocks (+5) after flipping UnitTesting.UnitTest.UnitTestExample.Capitalize at 0x0098"/>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="e9195457-34cb-4bfb-a1c4-a061a8248fc7" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize426"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="14" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;:&quot;</value>
<value name="result">&quot;_&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize(":");
Assert.AreEqual<string>("_", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize426()
{
    string s;
    s = this.Capitalize(":");
    Assert.AreEqual<string>("_", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (value[0] == ',' || value[0] == '.' || value[0] == ':') && 
                                value.Length == 1 && (96 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 123) && (64 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 91);
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:05Z" category="coverage" message="coverage increased from 12 to 14 blocks (+2) after flipping UnitTesting.UnitTest.UnitTestExample.Capitalize at 0x0078"/>
<log level="message" time="2013-03-15 11:50:05Z" category="summaries" message="using summary for Char.ToUpper(Char)"/>
<test name="Capitalize" state="success" duration="0.10"/>
<generatedTest id="5280fdde-c9b6-42cd-a5b0-5206c331c815" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize439"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="18" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;a&quot;</value>
<value name="result">&quot;A&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("a");
Assert.AreEqual<string>("A", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize439()
{
    string s;
    s = this.Capitalize("a");
    Assert.AreEqual<string>("A", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (96 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 123 || 64 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 91) && value.Length == 1;
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:05Z" category="coverage" message="coverage increased from 14 to 18 blocks (+4) after flipping UnitTesting.UnitTest.UnitTestExample.Capitalize at 0x0044"/>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="20e5f3dc-0e15-495a-82fa-ca93a0ebef55" index="6" run="6" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize582"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="18" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;a\0&quot;</value>
<value name="result">&quot;A&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("a\0");
Assert.AreEqual<string>("A", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize582()
{
    string s;
    s = this.Capitalize("a\0");
    Assert.AreEqual<string>("A", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (96 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 123 || 64 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 91) && value.Length == 2 && 
                                                                                                                                                                           (96 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 123) && (64 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 91) && value[1] != ',' && value[1] != '.' && value[1] != ':';
]]></pathCondition>
</generatedTest>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="acb7838c-086b-40ab-a2f8-c887cab39647" index="7" run="8" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize669"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;aa&quot;</value>
<value name="result">&quot;Aa&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("aa");
Assert.AreEqual<string>("Aa", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize669()
{
    string s;
    s = this.Capitalize("aa");
    Assert.AreEqual<string>("Aa", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (96 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 123 || 64 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 91) && 
                                (96 < (int)((ushort)(value[1])) && (int)((ushort)(value[1])) < 123 || 64 < (int)((ushort)(value[1])) && (int)((ushort)(value[1])) < 91) && value.Length == 2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:06Z" category="coverage" message="coverage increased from 18 to 20 blocks (+2) after flipping UnitTesting.UnitTest.UnitTestExample.Capitalize at 0x0044"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="6a504364-f472-408d-b9d9-053843646643" index="8" run="11" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize393"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;,\0&quot;</value>
<value name="result">&quot;_&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize(",\0");
Assert.AreEqual<string>("_", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize393()
{
    string s;
    s = this.Capitalize(",\0");
    Assert.AreEqual<string>("_", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (value[0] == ',' || value[0] == '.' || value[0] == ':') && 
                                value.Length == 2 && (96 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 123) && (64 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 91) && 
                                                     (96 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 123) && (64 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 91) && value[1] != ',' && value[1] != '.' && value[1] != ':';
]]></pathCondition>
</generatedTest>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="d8aee303-f230-4b0a-aafd-f25a4c5d4fbe" index="9" run="14" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize727"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;::&quot;</value>
<value name="result">&quot;__&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("::");
Assert.AreEqual<string>("__", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize727()
{
    string s;
    s = this.Capitalize("::");
    Assert.AreEqual<string>("__", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (value[0] == ',' || value[0] == '.' || value[0] == ':') && (value[1] == ',' || value[1] == '.' || value[1] == ':') && 
                                                                                           value.Length == 2 && (96 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 123) && (64 >= (int)((ushort)(value[0])) || (int)((ushort)(value[0])) >= 91) && 
                                                                                                                (96 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 123) && (64 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="29a3f727-4c75-499f-94e4-ce2d53f109b0" index="10" run="15" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize411"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;a.\u8061\0&quot;</value>
<value name="result">&quot;A_\u8061&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("a.\u8061\0");
Assert.AreEqual<string>("A_\u8061", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize411()
{
    string s;
    s = this.Capitalize("a.\u8061\0");
    Assert.AreEqual<string>("A_\u8061", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (96 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 123 || 64 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 91) && 
                                (value[1] == ',' || value[1] == '.' || value[1] == ':') && (96 < (int)((ushort)(value[2])) && (int)((ushort)(value[2])) < 123 || 64 < (int)((ushort)(value[2])) && (int)((ushort)(value[2])) < 91) && 
                                                                                           value.Length == 4 && (96 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 123) && (64 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 91) && 
                                                                                                                (96 >= (int)((ushort)(value[3])) || (int)((ushort)(value[3])) >= 123) && (64 >= (int)((ushort)(value[3])) || (int)((ushort)(value[3])) >= 91) && value[3] != ',' && value[3] != '.' && value[3] != ':';
]]></pathCondition>
</generatedTest>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="dc12a7c3-8803-4ccd-856f-c523e7e21f1f" index="11" run="16" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize538"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;aaa&quot;</value>
<value name="result">&quot;Aaa&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("aaa");
Assert.AreEqual<string>("Aaa", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize538()
{
    string s;
    s = this.Capitalize("aaa");
    Assert.AreEqual<string>("Aaa", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && (96 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 123 || 64 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 91) && 
                                (96 < (int)((ushort)(value[1])) && (int)((ushort)(value[1])) < 123 || 64 < (int)((ushort)(value[1])) && (int)((ushort)(value[1])) < 91) && 
                                (96 < (int)((ushort)(value[2])) && (int)((ushort)(value[2])) < 123 || 64 < (int)((ushort)(value[2])) && (int)((ushort)(value[2])) < 91) && value.Length == 3;
]]></pathCondition>
</generatedTest>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<generatedTest id="8da9602d-84e7-4d45-b12e-471caab55bf3" index="12" run="34" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="Capitalize630"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="value">&quot;a::a\0\0&quot;</value>
<value name="result">&quot;A__A&quot;</value>
<code><![CDATA[string s;
s = this.Capitalize("a::a\0\0");
Assert.AreEqual<string>("A__A", s);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void Capitalize630()
{
    string s;
    s = this.Capitalize("a::a\0\0");
    Assert.AreEqual<string>("A__A", s);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return value != (string)null && 
       (96 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 123 || 64 < (int)((ushort)(value[0])) && (int)((ushort)(value[0])) < 91) && (value[1] == ',' || value[1] == '.' || value[1] == ':') && 
                                                                                                                                                  (value[2] == ',' || value[2] == '.' || value[2] == ':') && (96 < (int)((ushort)(value[3])) && (int)((ushort)(value[3])) < 123 || 64 < (int)((ushort)(value[3])) && (int)((ushort)(value[3])) < 91) && 
                                                                                                                                                                                                             value.Length == 6 && (96 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 123) && (64 >= (int)((ushort)(value[1])) || (int)((ushort)(value[1])) >= 91) && 
                                                                                                                                                                                                                                  (96 >= (int)((ushort)(value[2])) || (int)((ushort)(value[2])) >= 123) && (64 >= (int)((ushort)(value[2])) || (int)((ushort)(value[2])) >= 91) && 
                                                                                                                                                                                                                                  (96 >= (int)((ushort)(value[4])) || (int)((ushort)(value[4])) >= 123) && (64 >= (int)((ushort)(value[4])) || (int)((ushort)(value[4])) >= 91) && 
                                                                                                                                                                                                                                  value[4] != ',' && value[4] != '.' && value[4] != ':' && 
                                                                                                                                                                                                                                  (96 >= (int)((ushort)(value[5])) || (int)((ushort)(value[5])) >= 123) && (64 >= (int)((ushort)(value[5])) || (int)((ushort)(value[5])) >= 91) && value[5] != ',' && value[5] != '.' && value[5] != ':';
]]></pathCondition>
</generatedTest>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.00"/>
<test name="Capitalize" state="success" duration="0.01"/>
<test name="Capitalize" state="success" duration="0.01"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="UnitTesting.Tests" name="Capitalize" token="6000001"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="value" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="20" total="20" coveredRatio="1"/>
<log level="message" time="2013-03-15 11:50:10Z" category="symbols" message="pdb/source out of sync for D:\UnitTesting\UnitTesting\UnitTestExample.vb"/>
<sourceCoverage xml="cov\e346\cov.xml" html="cov\e346\cov.html"/>
<result name="Capitalize(String)" state="success" duration="4.76506371619857"/>
<duration start="2013-03-15 11:50:05Z" end="2013-03-15 11:50:10Z" seconds="4.7655335"/>
<trajectory><image src="fix\unittestingunitt634989648102559594.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<exploration shortName="CapitalizeMaintainsLettersCount(String)" fullName="UnitTesting.UnitTest.UnitTestExampleTest.CapitalizeMaintainsLettersCount(String)"><method><definition assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount" token="6000002"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<memberUnderTest assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</memberUnderTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="1573a88e-0b95-4ba4-bb57-a857e71e2c62" index="1" run="1" exceptionState="expected" status="expectedexception" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCountThrowsArgumentNullException456"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="20" acov="3" atot="20"/>
<rcov name="asserts" dcov="0" dtot="1" acov="0" atot="1"/>
<value name="input">null</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount((string)null);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated;System"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void CapitalizeMaintainsLettersCountThrowsArgumentNullException456()
{
    this.CapitalizeMaintainsLettersCount((string)null);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<exceptionChain><exception typeDisplayName="ArgumentNullException" source="UnitTesting"><message><![CDATA[Value cannot be null.
Parameter name: value]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="ArgumentNullException" token="2000093" namespace="System"/>
</type>
<value name="paramName">value</value>
<stackTrace><frame value="  at UnitTestExample.Capitalize(String) in D:\UnitTesting\UnitTesting\UnitTestExample.vb(12)" method="UnitTestExample.Capitalize(String)" offset="21" file="D:\UnitTesting\UnitTesting\UnitTestExample.vb" line="12"><method assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
            'Adding Pre-Condition (Added to instruct PEX NullReferenceException is a expected exception if NULL value is passed to this method)
            If value Is Nothing Then]]></beforeSource>
<source><![CDATA[                Throw New ArgumentNullException("value")]]></source>
<afterSource><![CDATA[            End If

            Dim sb = New StringBuilder()]]></afterSource>
</frame>
<frame value="  at UnitTestExampleTest.CapitalizeMaintainsLettersCount(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(32)" method="UnitTestExampleTest.CapitalizeMaintainsLettersCount(String)" offset="2" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="32"><method assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount" token="6000002"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        [PexMethod] //Parameterized Unit Testing with Assertion using PEX
        public void CapitalizeMaintainsLettersCount(string input)
        {]]></beforeSource>
<source><![CDATA[            string output = UnitTestExample.Capitalize(input);]]></source>
<afterSource><![CDATA[            PexAssert.AreEqual(
            LettersCount(input),
            LettersCount(output));]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return input == (string)null;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.07"/>
<generatedTest id="462b2f7f-29b4-4669-9b68-6639a42b88bc" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount922"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="7" atot="20"/>
<rcov name="asserts" dcov="1" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount922()
{
    this.CapitalizeMaintainsLettersCount("");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && input.Length < 1;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.51"/>
<generatedTest id="357ed4e1-efa4-4445-9dce-406d7a44830f" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount526"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="12" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;\0&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount526()
{
    this.CapitalizeMaintainsLettersCount("\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && input.Length == 1 && 
                                (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && input[0] != ',' && input[0] != '.' && input[0] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="e2c4a5bd-2360-49d1-8063-f1c42b00dd2b" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount364"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="14" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;:&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount(":");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount364()
{
    this.CapitalizeMaintainsLettersCount(":");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (input[0] == ',' || input[0] == '.' || input[0] == ':') && 
                                input.Length == 1 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="f8e1d0ea-5cc3-43af-90b5-3da0fce2c8c3" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount152"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="18" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;a&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("a");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount152()
{
    this.CapitalizeMaintainsLettersCount("a");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && input.Length == 1;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="6c3cde71-6171-49d8-8e49-bfce4c1581f0" index="6" run="8" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount396"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;aa&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("aa");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount396()
{
    this.CapitalizeMaintainsLettersCount("aa");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && input.Length == 2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:50:11Z" category="coverage" message="coverage increased from 18 to 20 blocks (+2) after flipping &lt;unknown method&gt; at 0x&lt;unknown offset&gt;"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="aff4d94b-a0d5-44cc-a985-92ba2f1cdc64" index="7" run="24" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount217"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;::&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("::");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount217()
{
    this.CapitalizeMaintainsLettersCount("::");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (input[0] == ',' || input[0] == '.' || input[0] == ':') && (input[1] == ',' || input[1] == '.' || input[1] == ':') && 
                                                                                           input.Length == 2 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && 
                                                                                                                (96 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 123) && (64 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="82a5c334-e571-429e-bcbf-5630f6f0e2fe" index="8" run="26" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount554"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;aaa\u8061&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("aaa\u8061");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount554()
{
    this.CapitalizeMaintainsLettersCount("aaa\u8061");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && 
                                (96 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 123 || 64 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 91) && 
                                (96 < (int)((ushort)(input[3])) && (int)((ushort)(input[3])) < 123 || 64 < (int)((ushort)(input[3])) && (int)((ushort)(input[3])) < 91) && input.Length == 4;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<generatedTest id="0df462e9-533b-4520-8bc8-40e5ff2574e3" index="9" run="42" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount783"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;a:a\u8061&quot;</value>
<code><![CDATA[this.CapitalizeMaintainsLettersCount("a:a\u8061");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeMaintainsLettersCount783()
{
    this.CapitalizeMaintainsLettersCount("a:a\u8061");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (input[1] == ',' || input[1] == '.' || input[1] == ':') && (96 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 123 || 64 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 91) && 
                                                                                           (96 < (int)((ushort)(input[3])) && (int)((ushort)(input[3])) < 123 || 64 < (int)((ushort)(input[3])) && (int)((ushort)(input[3])) < 91) && 
                                                                                           input.Length == 4 && (96 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 123) && (64 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.01"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<test name="CapitalizeMaintainsLettersCount" state="success" duration="0.00"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="UnitTesting.Tests" name="CapitalizeMaintainsLettersCount" token="6000002"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="20" total="20" coveredRatio="1"/>
<log level="message" time="2013-03-15 11:50:14Z" category="symbols" message="could not load symbols for C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll"/>
<sourceCoverage xml="cov\e358\cov.xml" html="cov\e358\cov.html"/>
<result name="CapitalizeMaintainsLettersCount(String)" state="success" duration="3.89158594178869"/>
<duration start="2013-03-15 11:50:10Z" end="2013-03-15 11:50:14Z" seconds="3.8905503"/>
<trajectory><image src="fix\unittestingunitt634989648141621344.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<exploration shortName="CapitalizeReturnsOnlyLettersAndUnderscores(String)" fullName="UnitTesting.UnitTest.UnitTestExampleTest.CapitalizeReturnsOnlyLettersAndUnderscores(String)"><method><definition assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores" token="6000004"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<memberUnderTest assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</memberUnderTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="79dc6575-07d3-42b6-8827-d6c1407cc8e1" index="1" run="1" exceptionState="expected" status="expectedexception" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscoresThrowsArgumentNullException34"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="20" acov="3" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">null</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores((string)null);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated;System"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void CapitalizeReturnsOnlyLettersAndUnderscoresThrowsArgumentNullException34()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores((string)null);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<exceptionChain><exception typeDisplayName="ArgumentNullException" source="UnitTesting"><message><![CDATA[Value cannot be null.
Parameter name: value]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="ArgumentNullException" token="2000093" namespace="System"/>
</type>
<value name="paramName">value</value>
<stackTrace><frame value="  at UnitTestExample.Capitalize(String) in D:\UnitTesting\UnitTesting\UnitTestExample.vb(12)" method="UnitTestExample.Capitalize(String)" offset="21" file="D:\UnitTesting\UnitTesting\UnitTestExample.vb" line="12"><method assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
            'Adding Pre-Condition (Added to instruct PEX NullReferenceException is a expected exception if NULL value is passed to this method)
            If value Is Nothing Then]]></beforeSource>
<source><![CDATA[                Throw New ArgumentNullException("value")]]></source>
<afterSource><![CDATA[            End If

            Dim sb = New StringBuilder()]]></afterSource>
</frame>
<frame value="  at UnitTestExampleTest.CapitalizeReturnsOnlyLettersAndUnderscores(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(49)" method="UnitTestExampleTest.CapitalizeReturnsOnlyLettersAndUnderscores(String)" offset="2" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="49"><method assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores" token="6000004"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        [PexMethod] //Parameterized Unit Testing with Assertion using PEX
        public void CapitalizeReturnsOnlyLettersAndUnderscores(string input)
        {]]></beforeSource>
<source><![CDATA[            string output = UnitTestExample.Capitalize(input);]]></source>
<afterSource><![CDATA[            PexAssert.TrueForAll(output, IsLetterOrUnderscore);
        }
]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return input == (string)null;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<generatedTest id="9d83cd74-543c-40c1-844c-d3dac831c6e3" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores922"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="7" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores922()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && input.Length < 1;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="50b162dd-26c7-42fd-9a1b-70ceb291775c" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores526"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="12" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;\0&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores526()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && input.Length == 1 && 
                                (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && input[0] != ',' && input[0] != '.' && input[0] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="74846e57-4ad0-40df-b4db-2ee57370edf6" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores364"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="14" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;:&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores(":");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores364()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores(":");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (input[0] == ',' || input[0] == '.' || input[0] == ':') && 
                                input.Length == 1 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="f12eb8a0-4d7d-4404-88d6-2712d2efd715" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores152"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="18" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;a&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("a");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores152()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("a");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s0 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)((ushort)(input[0]) - 32u) : (ushort)(input[0]);
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && input.Length == 1;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="88d82032-5dc6-4223-a70d-d20d568ba96d" index="6" run="6" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores467"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="18" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;\u8061\0&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("\u8061\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores467()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("\u8061\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s0 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)((ushort)(input[0]) - 32u) : (ushort)(input[0]);
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && input.Length == 2 && 
                                                                                                   (96 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 123) && (64 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 91) && input[1] != ',' && input[1] != '.' && input[1] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="61f34290-779f-41f6-82db-ed3a0166f900" index="7" run="7" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores396"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;aa&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("aa");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores396()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("aa");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s0 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)((ushort)(input[0]) - 32u) : (ushort)(input[0]);
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && 
                                (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && input.Length == 2;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="751f1441-3766-4d95-abad-ae3442608eaa" index="8" run="9" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores747"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;,\0&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores(",\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores747()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores(",\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (input[0] == ',' || input[0] == '.' || input[0] == ':') && 
                                input.Length == 2 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && 
                                                     (96 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 123) && (64 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 91) && input[1] != ',' && input[1] != '.' && input[1] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="deca99f4-bc4f-4f4c-8d7d-417f8c6e9ce9" index="9" run="12" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores217"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;::&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("::");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores217()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("::");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (input[0] == ',' || input[0] == '.' || input[0] == ':') && (input[1] == ',' || input[1] == '.' || input[1] == ':') && 
                                                                                           input.Length == 2 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && 
                                                                                                                (96 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 123) && (64 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="e350edbd-6a45-4afc-81bd-81568f4143c7" index="10" run="15" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores868"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;a.\u8061\0&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("a.\u8061\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores868()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("a.\u8061\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s0 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)((ushort)(input[0]) - 32u) : (ushort)(input[0]);
uint s1 = (int)((ushort)(input[2])) < 122 && 97 < (int)((ushort)(input[2])) ? (ushort)((ushort)(input[2]) - 32u) : (ushort)(input[2]);
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (input[1] == ',' || input[1] == '.' || input[1] == ':') && (96 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 123 || 64 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 91) && 
                                                                                           (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && (96 < (int)s1 && (int)s1 < 123 || 64 < (int)s1 && (int)s1 < 91) && 
                                                                                                                                                              input.Length == 4 && (96 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 123) && (64 >= (int)((ushort)(input[1])) || (int)((ushort)(input[1])) >= 91) && 
                                                                                                                                                                                   (96 >= (int)((ushort)(input[3])) || (int)((ushort)(input[3])) >= 123) && (64 >= (int)((ushort)(input[3])) || (int)((ushort)(input[3])) >= 91) && input[3] != ',' && input[3] != '.' && input[3] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="516a984a-b4b8-42f5-b5ce-4ff57be7d280" index="11" run="20" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores226"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;aaa&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores("aaa");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores226()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores("aaa");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s0 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)((ushort)(input[0]) - 32u) : (ushort)(input[0]);
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && 
                                (96 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 123 || 64 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 91) && 
                                (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && input.Length == 3;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<log level="message" time="2013-03-15 11:50:15Z" category="progress" message="   54 runs (98.15 % unique paths), 20/20 blocks covered"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<generatedTest id="5e98fec8-116d-475e-96e1-9ad1b7ce4d1b" index="12" run="75" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores18"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="0"/>
<value name="input">&quot;.Ba:\0\0&quot;</value>
<code><![CDATA[this.CapitalizeReturnsOnlyLettersAndUnderscores(".Ba:\0\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeReturnsOnlyLettersAndUnderscores18()
{
    this.CapitalizeReturnsOnlyLettersAndUnderscores(".Ba:\0\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s0 = (int)((ushort)(input[1])) < 122 && 97 < (int)((ushort)(input[1])) ? (ushort)((ushort)(input[1]) - 32u) : (ushort)(input[1]);
return input != (string)null && 
       (input[0] == ',' || input[0] == '.' || input[0] == ':') && (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && 
                                                                  (96 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 123 || 64 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 91) && 
                                                                  (input[3] == ',' || input[3] == '.' || input[3] == ':') && (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && 
                                                                                                                             input.Length == 6 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && 
                                                                                                                                                  (96 >= (int)((ushort)(input[3])) || (int)((ushort)(input[3])) >= 123) && (64 >= (int)((ushort)(input[3])) || (int)((ushort)(input[3])) >= 91) && 
                                                                                                                                                  (96 >= (int)((ushort)(input[4])) || (int)((ushort)(input[4])) >= 123) && (64 >= (int)((ushort)(input[4])) || (int)((ushort)(input[4])) >= 91) && 
                                                                                                                                                  input[4] != ',' && input[4] != '.' && input[4] != ':' && 
                                                                                                                                                  (96 >= (int)((ushort)(input[5])) || (int)((ushort)(input[5])) >= 123) && (64 >= (int)((ushort)(input[5])) || (int)((ushort)(input[5])) >= 91) && input[5] != ',' && input[5] != '.' && input[5] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<log level="message" time="2013-03-15 11:50:20Z" category="progress" message="  250 constraint systems (66.40 % solved, 33.60 % proven unsatisfiable), flipping location UnitTestExample.Capitalize(String) at 0x0098 took 1s (33.46 %)"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.02"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.02"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.00"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<test name="CapitalizeReturnsOnlyLettersAndUnderscores" state="success" duration="0.01"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="UnitTesting.Tests" name="CapitalizeReturnsOnlyLettersAndUnderscores" token="6000004"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="20" total="20" coveredRatio="1"/>
<sourceCoverage xml="cov\e373\cov.xml" html="cov\e373\cov.html"/>
<result name="CapitalizeReturnsOnlyLettersAndUnderscores(String)" state="success" duration="6.71631562111944"/>
<duration start="2013-03-15 11:50:14Z" end="2013-03-15 11:50:20Z" seconds="6.718621"/>
<trajectory><image src="fix\unittestingunitt634989648208963801.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<exploration shortName="CapitalizeWillNotCapitalizeAgain(String)" fullName="UnitTesting.UnitTest.UnitTestExampleTest.CapitalizeWillNotCapitalizeAgain(String)"><method><definition assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain" token="6000003"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<memberUnderTest assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</memberUnderTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<generatedTest id="17af38e2-a7da-47a9-9930-af1f38c112e4" index="1" run="1" exceptionState="expected" status="expectedexception" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgainThrowsArgumentNullException94"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="20" acov="3" atot="20"/>
<rcov name="asserts" dcov="0" dtot="1" acov="0" atot="1"/>
<value name="input">null</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain((string)null);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated;System"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void CapitalizeWillNotCapitalizeAgainThrowsArgumentNullException94()
{
    this.CapitalizeWillNotCapitalizeAgain((string)null);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<exceptionChain><exception typeDisplayName="ArgumentNullException" source="UnitTesting"><message><![CDATA[Value cannot be null.
Parameter name: value]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="ArgumentNullException" token="2000093" namespace="System"/>
</type>
<value name="paramName">value</value>
<stackTrace><frame value="  at UnitTestExample.Capitalize(String) in D:\UnitTesting\UnitTesting\UnitTestExample.vb(12)" method="UnitTestExample.Capitalize(String)" offset="21" file="D:\UnitTesting\UnitTesting\UnitTestExample.vb" line="12"><method assemblyName="UnitTesting" name="Capitalize" static="true" token="600002c"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter name="value" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
            'Adding Pre-Condition (Added to instruct PEX NullReferenceException is a expected exception if NULL value is passed to this method)
            If value Is Nothing Then]]></beforeSource>
<source><![CDATA[                Throw New ArgumentNullException("value")]]></source>
<afterSource><![CDATA[            End If

            Dim sb = New StringBuilder()]]></afterSource>
</frame>
<frame value="  at UnitTestExampleTest.CapitalizeWillNotCapitalizeAgain(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(41)" method="UnitTestExampleTest.CapitalizeWillNotCapitalizeAgain(String)" offset="2" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="41"><method assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain" token="6000003"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        [PexMethod] //Parameterized Unit Testing with Assertion using PEX
        public void CapitalizeWillNotCapitalizeAgain(string input)
        {]]></beforeSource>
<source><![CDATA[            string capitalized = UnitTestExample.Capitalize(input);]]></source>
<afterSource><![CDATA[            string capitalizedAgain = UnitTestExample.Capitalize(capitalized);
            PexAssert.AreEqual(capitalized, capitalizedAgain);
        }]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return input == (string)null;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<generatedTest id="9e70adc8-26b2-4f02-9e96-f3c6e7ac15aa" index="2" run="2" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain922"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="7" atot="20"/>
<rcov name="asserts" dcov="1" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;&quot;</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain("");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeWillNotCapitalizeAgain922()
{
    this.CapitalizeWillNotCapitalizeAgain("");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && input.Length < 1;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<generatedTest id="785b8cc4-99bf-4a45-a053-9d56c774cae3" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain526"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="0" acov="12" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;\0&quot;</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain("\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeWillNotCapitalizeAgain526()
{
    this.CapitalizeWillNotCapitalizeAgain("\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && input.Length == 1 && 
                                (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && input[0] != ',' && input[0] != '.' && input[0] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<generatedTest id="eb010b28-148e-428c-ab4f-a3b4548aef39" index="4" run="4" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain364"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="14" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;:&quot;</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain(":");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeWillNotCapitalizeAgain364()
{
    this.CapitalizeWillNotCapitalizeAgain(":");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return input != (string)null && (input[0] == ',' || input[0] == '.' || input[0] == ':') && 
                                input.Length == 1 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91);
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<generatedTest id="edaf84a5-f85e-446c-aec9-c9d45fa27c76" index="5" run="5" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain152"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="18" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;a&quot;</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain("a");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeWillNotCapitalizeAgain152()
{
    this.CapitalizeWillNotCapitalizeAgain("a");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s1 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)(input[0]) - 32u : (uint)(input[0]);
uint s0 = (ushort)s1;
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && s1 == ((int)s0 < 122 && 97 < (int)s0 ? s0 - 32u : s1) && input.Length == 1;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<generatedTest id="350954a1-f5bc-4a8a-84d7-beada80cd965" index="6" run="7" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain396"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;aa&quot;</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain("aa");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeWillNotCapitalizeAgain396()
{
    this.CapitalizeWillNotCapitalizeAgain("aa");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s1 = (int)((ushort)(input[0])) < 122 && 97 < (int)((ushort)(input[0])) ? (ushort)(input[0]) - 32u : (uint)(input[0]);
uint s0 = (ushort)s1;
return input != (string)null && (96 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 123 || 64 < (int)((ushort)(input[0])) && (int)((ushort)(input[0])) < 91) && 
                                (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && 
                                (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && s1 == ((int)s0 < 122 && 97 < (int)s0 ? s0 - 32u : s1) && input.Length == 2;
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<generatedTest id="ecd49cd8-0899-4994-b6d8-b2f34786aaa4" index="7" run="52" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain154"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="20" atot="20"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="input">&quot;:aAdaaa::\u8061\0\0\0&quot;</value>
<code><![CDATA[this.CapitalizeWillNotCapitalizeAgain(":aAdaaa::\u8061\0\0\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void CapitalizeWillNotCapitalizeAgain154()
{
    this.CapitalizeWillNotCapitalizeAgain(":aAdaaa::\u8061\0\0\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[uint s1 = (int)((ushort)(input[1])) < 122 && 97 < (int)((ushort)(input[1])) ? (ushort)(input[1]) - 32u : (uint)(input[1]);
uint s0 = (ushort)s1;
uint s3 = (int)((ushort)(input[9])) < 122 && 97 < (int)((ushort)(input[9])) ? (ushort)(input[9]) - 32u : (uint)(input[9]);
uint s2 = (ushort)s3;
return input != (string)null && 
       (input[0] == ',' || input[0] == '.' || input[0] == ':') && (96 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 123 || 64 < (int)((ushort)(input[1])) && (int)((ushort)(input[1])) < 91) && 
                                                                  (96 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 123 || 64 < (int)((ushort)(input[2])) && (int)((ushort)(input[2])) < 91) && 
                                                                  (96 < (int)((ushort)(input[3])) && (int)((ushort)(input[3])) < 123 || 64 < (int)((ushort)(input[3])) && (int)((ushort)(input[3])) < 91) && 
                                                                  (96 < (int)((ushort)(input[4])) && (int)((ushort)(input[4])) < 123 || 64 < (int)((ushort)(input[4])) && (int)((ushort)(input[4])) < 91) && 
                                                                  (96 < (int)((ushort)(input[5])) && (int)((ushort)(input[5])) < 123 || 64 < (int)((ushort)(input[5])) && (int)((ushort)(input[5])) < 91) && 
                                                                  (96 < (int)((ushort)(input[6])) && (int)((ushort)(input[6])) < 123 || 64 < (int)((ushort)(input[6])) && (int)((ushort)(input[6])) < 91) && (input[7] == ',' || input[7] == '.' || input[7] == ':') && 
                                                                                                                                                                                                             (input[8] == ',' || input[8] == '.' || input[8] == ':') && (96 < (int)((ushort)(input[9])) && (int)((ushort)(input[9])) < 123 || 64 < (int)((ushort)(input[9])) && (int)((ushort)(input[9])) < 91) && 
                                                                                                                                                                                                                                                                        (96 < (int)s0 && (int)s0 < 123 || 64 < (int)s0 && (int)s0 < 91) && 
                                                                                                                                                                                                                                                                        (96 < (int)s2 && (int)s2 < 123 || 64 < (int)s2 && (int)s2 < 91) && s1 == ((int)s0 < 122 && 97 < (int)s0 ? s0 - 32u : s1) && s3 == ((int)s2 < 122 && 97 < (int)s2 ? s2 - 32u : s3) && 
                                                                                                                                                                                                                                                                                                                                                                                                    input.Length == 13 && (96 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 123) && (64 >= (int)((ushort)(input[0])) || (int)((ushort)(input[0])) >= 91) && 
                                                                                                                                                                                                                                                                                                                                                                                                                          (96 >= (int)((ushort)(input[7])) || (int)((ushort)(input[7])) >= 123) && (64 >= (int)((ushort)(input[7])) || (int)((ushort)(input[7])) >= 91) && 
                                                                                                                                                                                                                                                                                                                                                                                                                          (96 >= (int)((ushort)(input[8])) || (int)((ushort)(input[8])) >= 123) && (64 >= (int)((ushort)(input[8])) || (int)((ushort)(input[8])) >= 91) && 
                                                                                                                                                                                                                                                                                                                                                                                                                          (96 >= (int)((ushort)(input[10])) || (int)((ushort)(input[10])) >= 123) && (64 >= (int)((ushort)(input[10])) || (int)((ushort)(input[10])) >= 91) && 
                                                                                                                                                                                                                                                                                                                                                                                                                          input[10] != ',' && input[10] != '.' && input[10] != ':' && 
                                                                                                                                                                                                                                                                                                                                                                                                                          (96 >= (int)((ushort)(input[11])) || (int)((ushort)(input[11])) >= 123) && (64 >= (int)((ushort)(input[11])) || (int)((ushort)(input[11])) >= 91) && 
                                                                                                                                                                                                                                                                                                                                                                                                                          input[11] != ',' && input[11] != '.' && input[11] != ':' && 
                                                                                                                                                                                                                                                                                                                                                                                                                          (96 >= (int)((ushort)(input[12])) || (int)((ushort)(input[12])) >= 123) && (64 >= (int)((ushort)(input[12])) || (int)((ushort)(input[12])) >= 91) && 
                                                                                                                                                                                                                                                                                                                                                                                                                          input[12] != ',' && input[12] != '.' && input[12] != ':';
]]></pathCondition>
</generatedTest>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<log level="message" time="2013-03-15 11:50:25Z" category="progress" message="  101 runs (98.02 % unique paths), 20/20 blocks covered"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<log level="message" time="2013-03-15 11:50:26Z" category="progress" message="  250 constraint systems (47.60 % solved, 52.40 % proven unsatisfiable), flipping location UnitTestExample.Capitalize(String) at 0x0078 took 1s (41.79 %)"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.02"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.02"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.02"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.02"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.00"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<test name="CapitalizeWillNotCapitalizeAgain" state="success" duration="0.01"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e5b"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000348"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="UnitTesting.Tests" name="CapitalizeWillNotCapitalizeAgain" token="6000003"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="20" total="20" coveredRatio="1"/>
<sourceCoverage xml="cov\e379\cov.xml" html="cov\e379\cov.html"/>
<result name="CapitalizeWillNotCapitalizeAgain(String)" state="success" duration="9.41711558312579"/>
<duration start="2013-03-15 11:50:20Z" end="2013-03-15 11:50:30Z" seconds="9.4060694"/>
<trajectory><image src="fix\unittestingunitt634989648303024495.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="20" total="20" coveredRatio="1"/>
<sourceCoverage xml="cov\t629\cov.xml" html="cov\t629\cov.html"/>
<duration start="2013-03-15 11:50:05Z" end="2013-03-15 11:50:30Z" seconds="24.843273"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="20" total="20" coveredRatio="1"/>
<sourceCoverage xml="cov\a39912411\cov.xml" html="cov\a39912411\cov.html"/>
<duration start="2013-03-15 11:50:05Z" end="2013-03-15 11:50:30Z" seconds="24.9057718"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2013-03-15 11:50:05Z" end="2013-03-15 11:50:30Z" seconds="25.155767"/>
<background/>
</pex>
