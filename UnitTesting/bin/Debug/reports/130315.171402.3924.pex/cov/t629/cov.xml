<documents created="2013-03-15 11:44:02Z"><document src="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[// <copyright file="UnitTestExampleTest.cs">Copyright �  2013</copyright>

using System;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UnitTesting.UnitTest;
using System.Linq;

using UnitTesting.UnitTest.Moles;

namespace UnitTesting.UnitTest
{
    [TestClass]
    [PexClass(typeof(UnitTestExample))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class UnitTestExampleTest
    {
        [PexMethod] //Parameterized Unit Testing using PEX
        public string Capitalize(string value)
        {
            string result = UnitTestExample.Capitalize(value);
            return result;
            // TODO: add assertions to method UnitTestExampleTest.Capitalize(String)
        }


        [PexMethod] //Parameterized Unit Testing with Assertion using PEX
        public void CapitalizeMaintainsLettersCount(string input)
        {
            string output = UnitTestExample.Capitalize(input);
            PexAssert.AreEqual(
            LettersCount(input),
            LettersCount(output));
        }

        [PexMethod] //Parameterized Unit Testing with Assertion using PEX
        public void CapitalizeWillNotCapitalizeAgain(string input)
        {
            string capitalized = UnitTestExample.Capitalize(input);
            string capitalizedAgain = UnitTestExample.Capitalize(capitalized);
            PexAssert.AreEqual(capitalized, capitalizedAgain);
        }

        [PexMethod] //Parameterized Unit Testing with Assertion using PEX
        public void CapitalizeReturnsOnlyLettersAndUnderscores(string input)
        {
            string output = UnitTestExample.Capitalize(input);
            PexAssert.TrueForAll(output, IsLetterOrUnderscore);
        }

        [PexMethod, PexAllowedException(typeof(InvalidOperationException))] //Stub Type Mocking
        public void GetFileContentUsingInterface(string fileName)
        {
            //Arrange
            var Ifs = new SIFileSystem();
            Ifs.ReadAllTextString = fName =>
            {
                if (fName == null)
                    throw new InvalidOperationException("File Name Can't be NULL");
                else if (fName.Length == 0)
                    throw new InvalidOperationException("Length of File Name Can't be Zero");
                else
                    return fName;
            };

            //Act
            var test = new UnitTestExample(Ifs);
            string result = test.GetFileContentUsingInterface(fileName);

            //Assert
            PexAssert.AreEqual(fileName, result);

        }

        [PexMethod, PexAllowedException(typeof(InvalidOperationException))] //Mole Type Mocking
        public void GetFileContent(string fileName)
        ]]></source>
</chunk>
<method name="GetFileContent" namespace="UnitTesting.UnitTest" type="UnitTesting.UnitTest.UnitTestExampleTest" typeName="UnitTestExampleTest" token="6000006" module="UnitTesting.Tests.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="12" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="7" total="7" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //Arrange
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[MFileSystem.AllInstances.ReadAllTextString = (fs, fName) =>
            ]]></source>
</chunk>
<method name="&lt;GetFileContent&gt;b__2" namespace="UnitTesting.UnitTest" type="UnitTesting.UnitTest.UnitTestExampleTest" typeName="UnitTestExampleTest" token="600000b" module="UnitTesting.Tests.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="7" total="7" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[if (fName == null)]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("File Name Can't be NULL");]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="001a" domain="userortestcode"><source><![CDATA[if (fName.Length == 0)]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="002d" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("Length of File Name Can't be Zero");]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[
                else
                    ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="userortestcode"><source><![CDATA[return fName;]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[
            };]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            //Act
            ]]></source>
</chunk>
<chunk hits="1" offset="002c" domain="userortestcode"><source><![CDATA[string result = UnitTestExample.GetFileContent(fileName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            //Assert
            ]]></source>
</chunk>
<chunk hits="1" offset="0033" domain="userortestcode"><source><![CDATA[PexAssert.AreEqual(fileName, result);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="1" offset="003b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        private static int LettersCount(string s)
        {
            return Enumerable.Count(s, char.IsLetter);
        }       

        private static bool IsLetterOrUnderscore(char c)
        {
            return char.IsLetter(c) || c == '_';
        }
    }
}
]]></source>
</chunk>
</document>
<document src="D:\UnitTesting\UnitTesting\UnitTestExample.vb" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[Imports System.Text

Namespace UnitTest

    Public Class UnitTestExample

        'Static Method
        Public Shared Function Capitalize(ByVal value As String) As String

            'Adding Pre-Condition (Added to instruct PEX NullReferenceException is a expected exception if NULL value is passed to this method)
            If value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If

            Dim sb = New StringBuilder()
            Dim word As Boolean = False
            'word
            For Each c As Char In value
                If Char.IsLetter(c) Then
                    If Not word Then
                        sb.Append(Char.ToUpper(c))
                        word = True
                    Else
                        sb.Append(c)
                    End If
                Else

                    If Char.IsPunctuation(c) Then
                        sb.Append("_"c)
                    End If
                    word = False
                End If
            Next
            Return sb.ToString()

        End Function

        Dim Ifs As IFileSystem
        'Class Constructor with Dependency Injection
        Public Sub New(ByVal fs As IFileSystem)
            Me.Ifs = fs
        End Sub

        'Instance Function used for showing usage of Stub type Mocking
        Public Function GetFileContentUsingInterface(ByVal fileName As String) As String
            Dim content As String
            content = Me.Ifs.ReadAllText(fileName)
            Return content
        End Function

        'Shared Function
        ]]></source>
</chunk>
<method name="GetFileContent" namespace="UnitTesting.UnitTest" type="UnitTesting.UnitTest.UnitTestExample" typeName="UnitTestExample" token="600002f" module="UnitTesting.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="2"/>
<hit index="9" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[Public Shared Function GetFileContent(ByVal fileName As String) As String]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            Dim content As String
            Dim ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[fs As New FileSystem()]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            'Instance function used for showing usage of Moles type Mocking
            ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[content = fs.ReadAllText(fileName)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="000f" domain="usercodeundertest"><source><![CDATA[Return content]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0013" domain="usercodeundertest"><source><![CDATA[End Function]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    End Class

End Namespace]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of UnitTesting)" missing="true"><method name=".ctor" type="UnitTesting.UnitTest.FileSystem" token="6000020" module="UnitTesting.dll"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
</document>
</documents>
