<?xml version="1.0" encoding="utf-8"?>
<pex id="{fea40f0d-a230-4646-a1a3-10fbfb9e3ad0}" creationTime="2013-03-15 11:51:10Z" configuration="UnitTesting.UnitTest!\UnitTestExample!\*" created="2013-03-15 11:51:10Z" pexVersion="0.94.51023.0" xml="D:\UnitTesting\UnitTesting\bin\Debug\reports\130315.172110.3512.pex\report.per" html="D:\UnitTesting\UnitTesting\bin\Debug\reports\130315.172110.3512.pex\report.html"><environment commandLine="&quot;D:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; D:\UnitTesting\UnitTesting\bin\Debug\UnitTesting.dll /membernamefilter:M:Capitalize! /namespacefilter:UnitTesting.UnitTest! /typefilter:UnitTestExample! /explorationreflectionmode:LazyWizard /settingsassembly:D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll /x64failsilently /clrversion:v4.0.30319 /donotopenreport /reportlevel:Xml /reportrootpath:D:\UnitTesting\UnitTesting\bin\Debug\reports /testassemblyname:UnitTesting.Tests /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:D:\UnitTesting\UnitTesting\UnitTesting.vbproj /testprojectnotupdate /testprojectskip" machineName="SOUVIKDXP001F" osVersion="Microsoft Windows NT 5.1.2600 Service Pack 3" processorCount="2" clrVersion="4.0.30319.269" bitness="x86" user="souvikd"><envVars><envVar name="HOMEPATH" value="\Documents and Settings\souvikd"/>
<envVar name="COMPUTERNAME" value="SOUVIKDXP001F"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="VS80COMNTOOLS" value="D:\Program Files\Microsoft Visual Studio 8\Common7\Tools\"/>
<envVar name="PROCESSOR_IDENTIFIER" value="x86 Family 6 Model 23 Stepping 10, GenuineIntel"/>
<envVar name="QTJAVA" value="C:\Program Files\Java\jre7\lib\ext\QTJava.zip"/>
<envVar name="TMP" value="C:\DOCUME~1\souvikd\LOCALS~1\Temp"/>
<envVar name="CLASSPATH" value=".;C:\Program Files\Java\jre7\lib\ext\QTJava.zip"/>
<envVar name="PROCESSOR_REVISION" value="170a"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH"/>
<envVar name="TRACKER_ATTACHED" value="1"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_CLSID" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="VSPID" value="1404"/>
<envVar name="SSH_AGENT_PID" value="4464"/>
<envVar name="TEMP" value="C:\DOCUME~1\souvikd\LOCALS~1\Temp"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="SSH_AUTH_SOCK" value="/tmp/ssh-wVZwJo3068/agent.3068"/>
<envVar name="CLIENTNAME" value="Console"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x12"/>
<envVar name="USERDNSDOMAIN" value="AD.INDIADEV.LEXMARK.COM"/>
<envVar name="USERDOMAIN" value="INDIADEV"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="NUMBER_OF_PROCESSORS" value="2"/>
<envVar name="Path" value="C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\XEClient\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\Intel\WiFi\bin\;D:\Program Files\TortoiseSVN\bin;C:\Program Files\Java\jdk1.7.0_09\bin;C:\Program Files\QuickTime\QTSystem\;C:\Program Files\Common Files\Microsoft Shared\Windows Live"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
<envVar name="VS90COMNTOOLS" value="D:\Program Files\Microsoft Visual Studio 9.0\Common7\Tools\"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Linq.Expressions.ExpressionCompiler,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,__Box`1,__SzArrayHelper`1"/>
<envVar name="VisualStudioDir" value="C:\Documents and Settings\souvikd\My Documents\Visual Studio 2010"/>
<envVar name="CodeContractsInstallDir" value="C:\Program Files\Microsoft\Contracts\"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="FP_NO_HOST_CHECK" value="NO"/>
<envVar name="pex_clientid" value="pex1404_1"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="LOGONSERVER" value="\\NAZRUL"/>
<envVar name="SQLPATH" value="C:\XEClient\sqlplus"/>
<envVar name="USERPROFILE" value="C:\Documents and Settings\souvikd"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll,C:\WINDOWS\assembly\GAC_MSIL\Microsoft.Pex.Linq\0.94.0.0__31bf3856ad364e35\Microsoft.Pex.Linq.dll"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value=""/>
<envVar name="APPDATA" value="C:\Documents and Settings\souvikd\Application Data"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="VS100COMNTOOLS" value="D:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="USERNAME" value="souvikd"/>
<envVar name="COR_PROFILER" value="{fa6276ae-c2b7-443f-9cac-ea13fd3b342a}"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="pex_server_channel" value="pex1404"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,System,System.Core,System.Web,System.Xml.Linq,UnitTesting,UnitTesting.Tests"/>
<envVar name="ALLUSERSPROFILE" value="C:\Documents and Settings\All Users"/>
</envVars>
</environment>
<settings/>
<reflection><existingTest method="Capitalize393" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000010" generated="true"/>
<existingTest method="Capitalize411" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000012" generated="true"/>
<existingTest method="Capitalize426" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000c" generated="true"/>
<existingTest method="Capitalize439" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000d" generated="true"/>
<existingTest method="Capitalize538" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000013" generated="true"/>
<existingTest method="Capitalize582" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000e" generated="true"/>
<existingTest method="Capitalize630" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000014" generated="true"/>
<existingTest method="Capitalize669" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000f" generated="true"/>
<existingTest method="Capitalize727" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000011" generated="true"/>
<existingTest method="Capitalize870" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000b" generated="true"/>
<existingTest method="Capitalize983" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600000a" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount152" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000019" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount217" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600001b" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount364" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000018" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount396" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600001a" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount526" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000017" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount554" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600001c" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount783" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600001d" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCount922" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000016" generated="true"/>
<existingTest method="CapitalizeMaintainsLettersCountThrowsArgumentNullException456" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000015" generated="true" exceptionType="System.ArgumentNullException"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores18" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000029" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores152" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000022" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores217" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000026" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores226" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000028" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores364" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000021" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores396" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000024" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores467" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000023" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores526" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000020" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores747" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000025" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores868" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000027" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscores922" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600001f" generated="true"/>
<existingTest method="CapitalizeReturnsOnlyLettersAndUnderscoresThrowsArgumentNullException34" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600001e" generated="true" exceptionType="System.ArgumentNullException"/>
<existingTest method="CapitalizeThrowsArgumentNullException431" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000009" generated="true" exceptionType="System.ArgumentNullException"/>
<existingTest method="CapitalizeWillNotCapitalizeAgain152" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600002e" generated="true"/>
<existingTest method="CapitalizeWillNotCapitalizeAgain154" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000030" generated="true"/>
<existingTest method="CapitalizeWillNotCapitalizeAgain364" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600002d" generated="true"/>
<existingTest method="CapitalizeWillNotCapitalizeAgain396" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600002f" generated="true"/>
<existingTest method="CapitalizeWillNotCapitalizeAgain526" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600002c" generated="true"/>
<existingTest method="CapitalizeWillNotCapitalizeAgain922" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600002b" generated="true"/>
<existingTest method="CapitalizeWillNotCapitalizeAgainThrowsArgumentNullException94" type="UnitTesting.UnitTest.UnitTestExampleTest" token="600002a" generated="true" exceptionType="System.ArgumentNullException"/>
<existingTest method="GetFileContent206" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000033" generated="true" hosted="true"/>
<existingTest method="GetFileContentThrowsInvalidOperationException289" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000031" generated="true" hosted="true" exceptionType="System.InvalidOperationException"/>
<existingTest method="GetFileContentThrowsInvalidOperationException872" type="UnitTesting.UnitTest.UnitTestExampleTest" token="6000032" generated="true" hosted="true" exceptionType="System.InvalidOperationException"/>
</reflection>
<assembly name="UnitTesting" version="1.0.0.0" fileVersion="1.0.0.0" fullName="UnitTesting, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="D:\UnitTesting\UnitTesting\bin\Debug\UnitTesting.dll" fileName="UnitTesting.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="UnitTestExampleTest" type="UnitTesting.UnitTest.UnitTestExampleTest" typeName="UnitTestExampleTest" token="2000002" href="fix\UnitTesting.Tests.629.html"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
<settings typeUnderTest="UnitTesting.UnitTest.UnitTestExample"/>
<exploration shortName="GetFileContentUsingInterface(String)" fullName="UnitTesting.UnitTest.UnitTestExampleTest.GetFileContentUsingInterface(String)"><method><definition assemblyName="UnitTesting.Tests" name="GetFileContentUsingInterface" token="6000005"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fileName" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<memberUnderTest assemblyName="UnitTesting" name=".ctor" token="600002e"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fs" position="1"><type spec="Class"><definition assemblyName="UnitTesting" name="IFileSystem" token="200000b" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
</memberUnderTest>
<memberUnderTest assemblyName="UnitTesting" name="GetFileContentUsingInterface" token="600002f"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fileName" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</memberUnderTest>
<log level="message" time="2013-03-15 11:51:10Z" category="progress" message="    0 runs"/>
<log level="message" time="2013-03-15 11:51:10Z" category="symbols" message="could not load symbols for D:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe"/>
<log level="message" time="2013-03-15 11:51:10Z" category="symbols" message="search path: ;"/>
<test name="GetFileContentUsingInterface" state="success" duration="0.23"/>
<generatedTest id="9ba43db7-12d2-4d07-9b8d-7ff29a042b81" index="1" run="1" exceptionState="expected" status="expectedexception" generated="true" new="true" assemblyName="UnitTesting.Tests" name="GetFileContentUsingInterfaceThrowsInvalidOperationException870"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="4" acov="4" atot="4"/>
<rcov name="asserts" dcov="0" dtot="1" acov="0" atot="1"/>
<value name="fileName">null</value>
<code><![CDATA[this.GetFileContentUsingInterface((string)null);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated;System"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void GetFileContentUsingInterfaceThrowsInvalidOperationException870()
{
    this.GetFileContentUsingInterface((string)null);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<exceptionChain><exception typeDisplayName="InvalidOperationException" source="UnitTesting.Tests"><message><![CDATA[File Name Can't be NULL]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="InvalidOperationException" token="2000103" namespace="System"/>
</type>
<stackTrace><frame value="  at UnitTestExampleTest.&lt;GetFileContentUsingInterface&gt;b__0(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(61)" method="UnitTestExampleTest.&lt;GetFileContentUsingInterface&gt;b__0(String)" offset="25" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="61"><method assemblyName="UnitTesting.Tests" name="&lt;GetFileContentUsingInterface&gt;b__0" static="true" token="6000035"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter name="fName" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            Ifs.ReadAllTextString = fName =>
            {
                if (fName == null)]]></beforeSource>
<source><![CDATA[                    throw new InvalidOperationException("File Name Can't be NULL");]]></source>
<afterSource><![CDATA[                else if (fName.Length == 0)
                    throw new InvalidOperationException("Length of File Name Can't be Zero");
                else]]></afterSource>
</frame>
<frame value="  at UnitTestExample.GetFileContentUsingInterface(String) in D:\UnitTesting\UnitTesting\UnitTestExample.vb(56)" method="UnitTestExample.GetFileContentUsingInterface(String)" offset="8" file="D:\UnitTesting\UnitTesting\UnitTestExample.vb" line="56"><method assemblyName="UnitTesting" name="GetFileContentUsingInterface" token="600002f"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fileName" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        'Instance Function used for showing usage of Stub type Mocking
        Public Function GetFileContentUsingInterface(ByVal fileName As String) As String
            Dim content As String]]></beforeSource>
<source><![CDATA[            content = Me.Ifs.ReadAllText(fileName)]]></source>
<afterSource><![CDATA[            Return content
        End Function
]]></afterSource>
</frame>
<frame value="  at UnitTestExampleTest.GetFileContentUsingInterface(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(70)" method="UnitTestExampleTest.GetFileContentUsingInterface(String)" offset="59" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="70"><method assemblyName="UnitTesting.Tests" name="GetFileContentUsingInterface" token="6000005"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fileName" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            //Act
            var test = new UnitTestExample(Ifs);]]></beforeSource>
<source><![CDATA[            string result = test.GetFileContentUsingInterface(fileName);]]></source>
<afterSource><![CDATA[
            //Assert
            PexAssert.AreEqual(fileName, result);]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return fileName == (string)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2013-03-15 11:51:10Z" category="coverage" message="coverage increased from 0 to 4 blocks (+4) after flipping UnitTesting.UnitTest.UnitTestExampleTest.&lt;GetFileContentUsingInterface&gt;b__0 at 0x000a"/>
<test name="GetFileContentUsingInterface" state="success" duration="0.00"/>
<generatedTest id="09e9cac2-c386-45b6-a917-d9f8f2deb149" index="2" run="2" exceptionState="expected" status="expectedexception" generated="true" new="true" assemblyName="UnitTesting.Tests" name="GetFileContentUsingInterfaceThrowsInvalidOperationException909"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="4" atot="4"/>
<rcov name="asserts" dcov="0" dtot="0" acov="0" atot="1"/>
<value name="fileName">&quot;&quot;</value>
<code><![CDATA[this.GetFileContentUsingInterface("");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated;System"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void GetFileContentUsingInterfaceThrowsInvalidOperationException909()
{
    this.GetFileContentUsingInterface("");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<exceptionChain><exception typeDisplayName="InvalidOperationException" source="UnitTesting.Tests"><message><![CDATA[Length of File Name Can't be Zero]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="InvalidOperationException" token="2000103" namespace="System"/>
</type>
<stackTrace><frame value="  at UnitTestExampleTest.&lt;GetFileContentUsingInterface&gt;b__0(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(63)" method="UnitTestExampleTest.&lt;GetFileContentUsingInterface&gt;b__0(String)" offset="55" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="63"><method assemblyName="UnitTesting.Tests" name="&lt;GetFileContentUsingInterface&gt;b__0" static="true" token="6000035"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter name="fName" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[                if (fName == null)
                    throw new InvalidOperationException("File Name Can't be NULL");
                else if (fName.Length == 0)]]></beforeSource>
<source><![CDATA[                    throw new InvalidOperationException("Length of File Name Can't be Zero");]]></source>
<afterSource><![CDATA[                else
                    return fName;
            };]]></afterSource>
</frame>
<frame value="  at UnitTestExample.GetFileContentUsingInterface(String) in D:\UnitTesting\UnitTesting\UnitTestExample.vb(56)" method="UnitTestExample.GetFileContentUsingInterface(String)" offset="8" file="D:\UnitTesting\UnitTesting\UnitTestExample.vb" line="56"><method assemblyName="UnitTesting" name="GetFileContentUsingInterface" token="600002f"><declaringType assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting" name="UnitTestExample" token="200000f" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fileName" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        'Instance Function used for showing usage of Stub type Mocking
        Public Function GetFileContentUsingInterface(ByVal fileName As String) As String
            Dim content As String]]></beforeSource>
<source><![CDATA[            content = Me.Ifs.ReadAllText(fileName)]]></source>
<afterSource><![CDATA[            Return content
        End Function
]]></afterSource>
</frame>
<frame value="  at UnitTestExampleTest.GetFileContentUsingInterface(String) in D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs(70)" method="UnitTestExampleTest.GetFileContentUsingInterface(String)" offset="59" file="D:\UnitTesting\UnitTesting.Tests\UnitTestExampleTest.cs" line="70"><method assemblyName="UnitTesting.Tests" name="GetFileContentUsingInterface" token="6000005"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="2000002" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<parameter name="fileName" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            //Act
            var test = new UnitTestExample(Ifs);]]></beforeSource>
<source><![CDATA[            string result = test.GetFileContentUsingInterface(fileName);]]></source>
<afterSource><![CDATA[
            //Assert
            PexAssert.AreEqual(fileName, result);]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return fileName != (string)null && fileName.Length == 0;
]]></pathCondition>
</generatedTest>
<test name="GetFileContentUsingInterface" state="success" duration="0.01"/>
<generatedTest id="5a524a71-3407-472b-be2d-20f23b77e63f" index="3" run="3" status="normaltermination" generated="true" new="true" assemblyName="UnitTesting.Tests" name="GetFileContentUsingInterface206"><declaringType assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="UnitTesting.Tests" name="UnitTestExampleTest" token="ffffffff" namespace="UnitTesting.UnitTest"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="4" atot="4"/>
<rcov name="asserts" dcov="1" dtot="0" acov="1" atot="1"/>
<value name="fileName">&quot;\0&quot;</value>
<code><![CDATA[this.GetFileContentUsingInterface("\0");
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(UnitTestExampleTest))]
public void GetFileContentUsingInterface206()
{
    this.GetFileContentUsingInterface("\0");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="UnitTesting.Tests" location="D:\UnitTesting\UnitTesting.Tests\bin\Debug\UnitTesting.Tests.dll"/>
<pathCondition><![CDATA[return fileName != (string)null && fileName.Length != 0;
]]></pathCondition>
</generatedTest>
<coverage domain="usercodeundertest" unit="block" covered="4" total="4" coveredRatio="1"/>
<log level="message" time="2013-03-15 11:51:10Z" category="symbols" message="pdb/source out of sync for D:\UnitTesting\UnitTesting\UnitTestExample.vb"/>
<sourceCoverage xml="cov\e346\cov.xml" html="cov\e346\cov.html"/>
<result name="GetFileContentUsingInterface(String)" state="success" duration="0.46"/>
<duration start="2013-03-15 11:51:10Z" end="2013-03-15 11:51:10Z" seconds="0.47"/>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="4" total="4" coveredRatio="1"/>
<sourceCoverage xml="cov\t629\cov.xml" html="cov\t629\cov.html"/>
<duration start="2013-03-15 11:51:10Z" end="2013-03-15 11:51:10Z" seconds="0.50"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="4" total="4" coveredRatio="1"/>
<sourceCoverage xml="cov\a37134259\cov.xml" html="cov\a37134259\cov.html"/>
<duration start="2013-03-15 11:51:10Z" end="2013-03-15 11:51:10Z" seconds="0.53"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2013-03-15 11:51:10Z" end="2013-03-15 11:51:10Z" seconds="0.83"/>
<background/>
</pex>
